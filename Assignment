Name:     AKANKSHA KUMARI
Roll NO:  10
Reg. NO:  11800806
Section:  K18LE
GitHub URL: https://github.com/AkankshaAM/Operating-system
            https://github.com/AkankshaAM/Operating-system/blob/master/Q1
            https://github.com/AkankshaAM/Operating-system/blob/master/Q2
            

Problem:A typical process involves both I/O time and CPU time. In a uniprogramming system like MS-DOS, time spent waiting for I/O is wasted and CPU is free during this time. In ipossible only with process scheduling.
Different Scheduling Algorithms to solve memory wastage 

First Come First Serve (FCFS): Simplest scheduling algorithm that schedules according to arrival times of processes.

Shortest Job First(SJF): Process which have the shortest burst time are scheduled first

scan disk scheduling algorithm:   it is done by operating systems to schedule I/O requests arriving for disk. Disk scheduling is also known as I/O scheduling.

Priority Based scheduling (Non Preemptive): In this scheduling, processes are scheduled according to their priorities, i.e., highest priority process is schedule first. If priorities of two processes match, then schedule according to arrival time.

Description: 
One of the main jobs of operating system kernels is that they need to be able to execute all of the processes running on your computer efficiently such that high priority processes are completed as quickly as possible, while also ensuring that there is some fairness in how they schedule processes; even if a process is a low priority, it eventually needs to complete execution.
sCAN Disk Scheduling Algorithm-
 
•	As the name suggests, this algorithm scans all the cylinders of the disk back and forth.
•	Head starts from one end of the disk and move towards the other end servicing all the requests in between.
•	After reaching the other end, head reverses its direction and move towards the starting end servicing all the requests in between.
•	The same process repeats.
 
NOTE-
 
•	SCAN Algorithm is also called as Elevator Algorithm.
•	This is because its working resembles the working of an elevator.
 
.
The time quantum is further divided into smaller amounts of time called work time. A process is allowed to work for this work time, and then the scheduler will begin the loop over. If the process has not finished, and has not become a blockingprocess, then it will be processed again for the work time. The same process is repeatedly allowed to work until the full quantum time has been reached, or it finishes, at which point, if the process has not finished, it will be sent to the next lower-priority queue, or if already in the lowest priority queue, sent to the back of the line in that queue.
One thing to note is that processes in higher priority queues are allocated less CPU time than processes in a lower priority queue. The logic here is that the scheduler wants to get through as many of the short, high priority processes first, then the long, high priority processes, followed by the short low priority processes, before finally getting around to the long, low priority processes. Oftentimes, these long-running low priority processes only get allocated CPU time when your computer isidle, because during high usage periods, new processes are constantly being added to the highest-priority queue by the scheduler.
Algorithm:

SCAN  DISK SCHEDULING

•	As the name suggests, this algorithm scans all the cylinders of the disk back and forth.
•	Head starts from one end of the disk and move towards the other end servicing all the requests in between.
•	After reaching the other end, head reverses its direction and move towards the starting end servicing all the requests in between.
•	The same process repeats
•	Complexity- O(logN)

Q1:
Write a C program to solve the following problem:
Suppose that a disk drive has 5 ,000 cylinders, numbered 0 to 499 9. The drive is currently serving a request at cylinder 143, and the previous request was at cylinder 125. The queue of pending requests, in FIFO Order, is: 86,1470, 91, 1774, 948, 1509, 1022,1750, 130 Starting from the current head position, what is the total distance (in cylinders) that the disk arm moves to satisfy all the pending requests for each of the SCAN disk-scheduling algorithms?

CODE:
#include<stdio.h>
#include<conio.h>
#include<stdlib.h>
#define size 5000
int queue[size],front= -1,rear= -1;
void enqueue(int);
void display();
void calc();
void main()
{
int i,n;
int value;
clrscr();
printf("no of elements to insert:");
scanf("%d",&n);
for(i=0;i<n;i++)
{
scanf("%d",&value);
enqueue(value);
}
display();
calc();
}
void enqueue(int value)
{
if(rear==size-1)
{
printf("queue--full");
}
else
{
if(front==-1)
front=0;
rear++;
queue[rear]=value;
}
}
void display()
{
int i;
if(rear==-1)
{
printf("queue--empty");
}
else
{
for(i=front;i<=rear;i++)
{
printf("%d\t",queue[i]);
}
}
}
void calc()
{
int total_distance=0,d,i;
int current_pos,prev_pos;
printf("\n");
printf("enter prev pos:");
scanf("%d",&prev_pos);
printf("\n");
printf("enter current pos");
scanf("%d",&current_pos);
d=current_pos-queue[front];
if(d<0)
total_distance=-d;
else
total_distance=d;
for(i=front;i<rear;i++)
{
d=queue[i]-queue[i+1];
if(d<0)
d=-d;
total_distance=total_distance + d;
}
printf("\a");
printf("distance=%d",total_distance);
getch();
}


Q2:
17.	Design a scheduling program to implements a Queue with two levels:
Level 1 : Fixed priority preemptive Scheduling
Level 2: Round Robin Scheduling
For a Fixed priority preemptive Scheduling (Queue1), the Priority 0 is highest priority. If one process P1 is scheduled and running, another process P2 with higher priority comes. The New process (high  priority) process P2 preempts currently running process P1 and process P1 will go to second level queue. Time for which process will strictly execute must be considered in the multiples of 2. All the processes in second level queue will complete their execution according to round robin scheduling.
Consider: 1. Queue 2 will be processed after Queue 1 becomes empty. 
2. Priority of Queue 2 has lower priority than in Queue 1.

CODE:
#include<stdio.h>
#include<conio.h>
struct proc
{
char proc_name;
int A_time,B_time,C_time,W_time,TA_time,prior;
int status;
};
void main()
{
struct proc wq[10];
struct proc proc[10];
struct proc proc1[10];
struct proc temp;
int n,i;
int posi,j,tq,t;
printf("total number of processes to enter:");
scanf("%d",&n);
for(i=0;i<n;i++)
{	
printf("Enter name for process p[%d]: ",i);
scanf(" %c",&proc[i].proc_name);
printf("Details for the process %c\n",proc[i].proc_name);
printf("Arrival Time: ");
scanf(" %d",&proc[i].A_time);
printf("Burst Time: ");
scanf(" %d",&proc[i].B_time);
printf("Priority: ");
scanf(" %d", &proc[i].prior);
}
printf("the data you entered is: \n");
printf("Process\tAT\tBT\tPriority\n");
for(i=0;i<n;i++)
{
printf("%c%d%d%d\n",proc[i].proc_name,proc[i].A_time,proc[i].B_time,proc[i].prior);
}
for(i=0;i<n;i++)
{
for(j=i+1;j<n;j++)
{
proc[i].status=0;
if(proc[j].A_time<proc[i].A_time)
posi=j;
}
temp=proc[i];
proc[i]=proc[posi];
proc[posi]=temp;
}
printf("sorted the data according to arival time:");
printf("process\tat\tbt\tpriority\n");
for(i=0;i<n;i++)
{
printf("%c\t%d\t%d\t%d\n",proc[i].proc_name,proc[i].A_time,proc[i].B_time,proc[i].prior);
}
for(i=0;i<n;i++)
{
if(proc[i].prior<proc[i+1].prior)
{
for(i=0;i<n;i++)
{
do{
int c=1;
proc[i].B_time=proc[i].B_time-c;
if(proc[i].B_time==0)
{
printf("the process %d has been exhausted\n",proc[i].proc_name);
break;
}
if(proc[i+1].prior>=proc[i].prior)
{
wq[i].proc_name=proc[i+1].proc_name;
wq[i].B_time=proc[i+1].B_time;
}
}
while(proc[i].A_time<proc[i+1].A_time);
}
}
printf("\nwaiting queue:");
for(i=0;i<n;i++)
{
printf("%c\n",wq[i].proc_name);
}
}
printf("\n\n");
printf("\nround robin scheduling algorithm:");
printf("\nenter the time quantam for each process:");
scanf("%d",&tq);
if(tq%2!=0)
{
scanf("%d",&tq);
}
if(wq[i].B_time>tq)
{
t+=tq;
wq[i].B_time-=tq;
}
else
{
t=t+wq[i].B_time;
wq[i].W_time=t-wq[i].B_time;
wq[i].B_time=0;
}
printf("%c\n",wq[i].proc_name);
for(i=0;i<n;i++)
{
wq[i].B_time-=tq;
if(wq[i].B_time==0)
{
printf("%c\n",wq[i].proc_name);
}
}
getch();
}
